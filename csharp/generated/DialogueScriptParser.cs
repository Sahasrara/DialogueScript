//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammar/DialogueScriptParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class DialogueScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE_BOOLEAN=1, TYPE_CHAR=2, TYPE_FLOAT_DEFAULT=3, TYPE_FLOAT32=4, TYPE_FLOAT64=5, 
		TYPE_INT_DEFAULT=6, TYPE_INT8=7, TYPE_INT16=8, TYPE_INT32=9, TYPE_INT64=10, 
		TYPE_UINT_DEFAULT=11, TYPE_UINT8=12, TYPE_UINT16=13, TYPE_UINT32=14, TYPE_UINT64=15, 
		TYPE_STRING=16, BREAK=17, CASE=18, DEFAULT=19, IF=20, ELSE=21, SWITCH=22, 
		INTEGER_LITERAL=23, FLOATING_POINT_LITERAL=24, BOOLEAN_LITERAL=25, CHARACTER_LITERAL=26, 
		STRING_LITERAL=27, NULL_LITERAL=28, LPAREN=29, RPAREN=30, LBRACE=31, RBRACE=32, 
		LBRACK=33, RBRACK=34, SEMI=35, COMMA=36, DOT=37, COLON=38, COLONCOLON=39, 
		ASSIGN=40, ADD_ASSIGN=41, SUB_ASSIGN=42, MUL_ASSIGN=43, DIV_ASSIGN=44, 
		AND_ASSIGN=45, OR_ASSIGN=46, XOR_ASSIGN=47, MOD_ASSIGN=48, LSHIFT_ASSIGN=49, 
		RSHIFT_ASSIGN=50, GT=51, LT=52, EQUAL=53, LE=54, GE=55, NOTEQUAL=56, NOT=57, 
		BIT_NOT=58, BIT_AND=59, BIT_OR=60, BIT_XOR=61, AND=62, OR=63, INC=64, 
		DEC=65, ADD=66, SUB=67, MUL=68, DIV=69, MOD=70, TERNARY=71, IDENTIFIER=72, 
		WHITESPACE=73, COMMENT_BLOCK=74, COMMENT_LINE=75;
	public const int
		RULE_script = 0, RULE_scheduled_block = 1, RULE_scheduled_block_open = 2, 
		RULE_scheduled_block_close = 3, RULE_block = 4, RULE_statement = 5, RULE_compound_statement = 6, 
		RULE_statement_list = 7, RULE_expression_statement = 8, RULE_if_statement = 9, 
		RULE_switch_statement = 10, RULE_switch_block = 11, RULE_switch_label = 12, 
		RULE_declaration_statement = 13, RULE_declarator_init = 14, RULE_declarator = 15, 
		RULE_break_statement = 16, RULE_expression_list = 17, RULE_expression = 18, 
		RULE_assignment_operator = 19, RULE_type = 20, RULE_primitive_type = 21, 
		RULE_name = 22, RULE_flag_list = 23, RULE_literal = 24;
	public static readonly string[] ruleNames = {
		"script", "scheduled_block", "scheduled_block_open", "scheduled_block_close", 
		"block", "statement", "compound_statement", "statement_list", "expression_statement", 
		"if_statement", "switch_statement", "switch_block", "switch_label", "declaration_statement", 
		"declarator_init", "declarator", "break_statement", "expression_list", 
		"expression", "assignment_operator", "type", "primitive_type", "name", 
		"flag_list", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'char'", "'float'", "'float32'", "'float64'", "'int'", 
		"'int8'", "'int16'", "'int32'", "'int64'", "'uint'", "'uint8'", "'uint16'", 
		"'uint32'", "'uint64'", "'string'", "'break'", "'case'", "'default'", 
		"'if'", "'else'", "'switch'", null, null, null, null, null, "'null'", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "':'", 
		"'::'", "'='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
		"'%='", "'<<='", "'>>='", "'>'", "'<'", "'=='", "'<='", "'>='", "'!='", 
		"'!'", "'~'", "'&'", "'|'", "'^'", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE_BOOLEAN", "TYPE_CHAR", "TYPE_FLOAT_DEFAULT", "TYPE_FLOAT32", 
		"TYPE_FLOAT64", "TYPE_INT_DEFAULT", "TYPE_INT8", "TYPE_INT16", "TYPE_INT32", 
		"TYPE_INT64", "TYPE_UINT_DEFAULT", "TYPE_UINT8", "TYPE_UINT16", "TYPE_UINT32", 
		"TYPE_UINT64", "TYPE_STRING", "BREAK", "CASE", "DEFAULT", "IF", "ELSE", 
		"SWITCH", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", 
		"CHARACTER_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "COLON", 
		"COLONCOLON", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "GT", "LT", "EQUAL", "LE", "GE", "NOTEQUAL", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "TERNARY", "IDENTIFIER", "WHITESPACE", "COMMENT_BLOCK", 
		"COMMENT_LINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DialogueScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DialogueScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DialogueScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DialogueScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DialogueScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_blockContext[] scheduled_block() {
			return GetRuleContexts<Scheduled_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_blockContext scheduled_block(int i) {
			return GetRuleContext<Scheduled_blockContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LT) {
				{
				{
				State = 50;
				scheduled_block();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_block_openContext scheduled_block_open() {
			return GetRuleContext<Scheduled_block_openContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_block_closeContext scheduled_block_close() {
			return GetRuleContext<Scheduled_block_closeContext>(0);
		}
		public Scheduled_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block; } }
	}

	[RuleVersion(0)]
	public Scheduled_blockContext scheduled_block() {
		Scheduled_blockContext _localctx = new Scheduled_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_scheduled_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			scheduled_block_open();
			State = 59;
			block();
			State = 60;
			scheduled_block_close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_block_openContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(DialogueScriptParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(DialogueScriptParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flag_listContext flag_list() {
			return GetRuleContext<Flag_listContext>(0);
		}
		public Scheduled_block_openContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block_open; } }
	}

	[RuleVersion(0)]
	public Scheduled_block_openContext scheduled_block_open() {
		Scheduled_block_openContext _localctx = new Scheduled_block_openContext(Context, State);
		EnterRule(_localctx, 4, RULE_scheduled_block_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(LT);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 63;
				flag_list();
				}
			}

			State = 66;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_block_closeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(DialogueScriptParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(DialogueScriptParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flag_listContext flag_list() {
			return GetRuleContext<Flag_listContext>(0);
		}
		public Scheduled_block_closeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block_close; } }
	}

	[RuleVersion(0)]
	public Scheduled_block_closeContext scheduled_block_close() {
		Scheduled_block_closeContext _localctx = new Scheduled_block_closeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scheduled_block_close);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(GT);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 69;
				flag_list();
				}
			}

			State = 72;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 432345567445909502L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 271L) != 0)) {
				{
				{
				State = 74;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				if_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				switch_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				compound_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				expression_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				declaration_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				break_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DialogueScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DialogueScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_compound_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(LBRACE);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 432345567445909502L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 271L) != 0)) {
				{
				State = 89;
				statement_list();
				}
			}

			State = 92;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 94;
				statement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 432345567445909502L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 271L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(DialogueScriptParser.SEMI, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			expression(0);
			State = 100;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(DialogueScriptParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DialogueScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DialogueScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(DialogueScriptParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(IF);
			State = 103;
			Match(LPAREN);
			State = 104;
			expression(0);
			State = 105;
			Match(RPAREN);
			State = 106;
			statement();
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 107;
				Match(ELSE);
				State = 108;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(DialogueScriptParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DialogueScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DialogueScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_blockContext switch_block() {
			return GetRuleContext<Switch_blockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(SWITCH);
			State = 112;
			Match(LPAREN);
			State = 113;
			expression(0);
			State = 114;
			Match(RPAREN);
			State = 115;
			switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DialogueScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DialogueScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_block; } }
	}

	[RuleVersion(0)]
	public Switch_blockContext switch_block() {
		Switch_blockContext _localctx = new Switch_blockContext(Context, State);
		EnterRule(_localctx, 22, RULE_switch_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(LBRACE);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 118;
				switch_label();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(DialogueScriptParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DialogueScriptParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(DialogueScriptParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch_label);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				Match(CASE);
				State = 127;
				expression(0);
				State = 128;
				Match(COLON);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 432345567445909502L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 271L) != 0)) {
					{
					{
					State = 129;
					statement();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(DEFAULT);
				State = 136;
				Match(COLON);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 432345567445909502L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 271L) != 0)) {
					{
					{
					State = 137;
					statement();
					}
					}
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declarator_initContext declarator_init() {
			return GetRuleContext<Declarator_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(DialogueScriptParser.SEMI, 0); }
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_declaration_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			type(0);
			State = 146;
			declarator_init();
			State = 147;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declarator_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(DialogueScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declarator_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator_init; } }
	}

	[RuleVersion(0)]
	public Declarator_initContext declarator_init() {
		Declarator_initContext _localctx = new Declarator_initContext(Context, State);
		EnterRule(_localctx, 28, RULE_declarator_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			declarator();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 150;
				Match(ASSIGN);
				State = 151;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(DialogueScriptParser.IDENTIFIER, 0); }
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(DialogueScriptParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(DialogueScriptParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(BREAK);
			State = 157;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DialogueScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DialogueScriptParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			expression(0);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 160;
				Match(COMMA);
				State = 161;
				expression(0);
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression_bitwise_orContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(DialogueScriptParser.BIT_OR, 0); }
		public Expression_bitwise_orContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_bitwise_andContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(DialogueScriptParser.BIT_AND, 0); }
		public Expression_bitwise_andContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_relational_gtContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DialogueScriptParser.GT, 0); }
		public Expression_relational_gtContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_postfix_invokeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DialogueScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DialogueScriptParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Expression_postfix_invokeContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_bitwise_xorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(DialogueScriptParser.BIT_XOR, 0); }
		public Expression_bitwise_xorContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_postfix_inc_decContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(DialogueScriptParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(DialogueScriptParser.DEC, 0); }
		public Expression_postfix_inc_decContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_primary_parentheticalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DialogueScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DialogueScriptParser.RPAREN, 0); }
		public Expression_primary_parentheticalContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_additive_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(DialogueScriptParser.ADD, 0); }
		public Expression_additive_addContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_shift_rightContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(DialogueScriptParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(DialogueScriptParser.GT, i);
		}
		public Expression_shift_rightContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_ternaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERNARY() { return GetToken(DialogueScriptParser.TERNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(DialogueScriptParser.COLON, 0); }
		public Expression_ternaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_equality_not_eqContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(DialogueScriptParser.NOTEQUAL, 0); }
		public Expression_equality_not_eqContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_logical_orContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(DialogueScriptParser.OR, 0); }
		public Expression_logical_orContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_primary_literalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Expression_primary_literalContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_relational_geContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(DialogueScriptParser.GE, 0); }
		public Expression_relational_geContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_postfix_invoke_asyncContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(DialogueScriptParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(DialogueScriptParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Expression_postfix_invoke_asyncContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_shift_leftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(DialogueScriptParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(DialogueScriptParser.LT, i);
		}
		public Expression_shift_leftContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_equality_eqContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(DialogueScriptParser.EQUAL, 0); }
		public Expression_equality_eqContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_primary_nameContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Expression_primary_nameContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_assignmentContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_relational_ltContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DialogueScriptParser.LT, 0); }
		public Expression_relational_ltContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_unaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(DialogueScriptParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(DialogueScriptParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(DialogueScriptParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(DialogueScriptParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(DialogueScriptParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(DialogueScriptParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(DialogueScriptParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(DialogueScriptParser.RPAREN, 0); }
		public Expression_unaryContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_additive_subContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(DialogueScriptParser.SUB, 0); }
		public Expression_additive_subContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_multiplicative_divContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(DialogueScriptParser.DIV, 0); }
		public Expression_multiplicative_divContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_postfix_array_accessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(DialogueScriptParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(DialogueScriptParser.RBRACK, 0); }
		public Expression_postfix_array_accessContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_logical_andContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(DialogueScriptParser.AND, 0); }
		public Expression_logical_andContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_multiplicative_mulContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(DialogueScriptParser.MUL, 0); }
		public Expression_multiplicative_mulContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_multiplicative_modContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(DialogueScriptParser.MOD, 0); }
		public Expression_multiplicative_modContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Expression_relational_leContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(DialogueScriptParser.LE, 0); }
		public Expression_relational_leContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				_localctx = new Expression_primary_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 168;
				name();
				}
				break;
			case 2:
				{
				_localctx = new Expression_primary_literalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new Expression_primary_parentheticalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 170;
				Match(LPAREN);
				State = 171;
				expression(0);
				State = 172;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new Expression_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUB:
					{
					State = 174;
					Match(SUB);
					}
					break;
				case ADD:
					{
					State = 175;
					Match(ADD);
					}
					break;
				case NOT:
					{
					State = 176;
					Match(NOT);
					}
					break;
				case BIT_NOT:
					{
					State = 177;
					Match(BIT_NOT);
					}
					break;
				case DEC:
					{
					State = 178;
					Match(DEC);
					}
					break;
				case INC:
					{
					State = 179;
					Match(INC);
					}
					break;
				case LPAREN:
					{
					State = 180;
					Match(LPAREN);
					State = 181;
					type(0);
					State = 182;
					Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 186;
				expression(21);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 274;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new Expression_multiplicative_mulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 190;
						Match(MUL);
						State = 191;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new Expression_multiplicative_divContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 193;
						Match(DIV);
						State = 194;
						expression(20);
						}
						break;
					case 3:
						{
						_localctx = new Expression_multiplicative_modContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 196;
						Match(MOD);
						State = 197;
						expression(19);
						}
						break;
					case 4:
						{
						_localctx = new Expression_additive_addContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 199;
						Match(ADD);
						State = 200;
						expression(18);
						}
						break;
					case 5:
						{
						_localctx = new Expression_additive_subContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 202;
						Match(SUB);
						State = 203;
						expression(17);
						}
						break;
					case 6:
						{
						_localctx = new Expression_shift_leftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 205;
						Match(LT);
						State = 206;
						Match(LT);
						State = 207;
						expression(16);
						}
						break;
					case 7:
						{
						_localctx = new Expression_shift_rightContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 209;
						Match(GT);
						State = 210;
						Match(GT);
						State = 211;
						expression(15);
						}
						break;
					case 8:
						{
						_localctx = new Expression_relational_ltContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 213;
						Match(LT);
						State = 214;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new Expression_relational_gtContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 216;
						Match(GT);
						State = 217;
						expression(13);
						}
						break;
					case 10:
						{
						_localctx = new Expression_relational_leContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 219;
						Match(LE);
						State = 220;
						expression(12);
						}
						break;
					case 11:
						{
						_localctx = new Expression_relational_geContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 222;
						Match(GE);
						State = 223;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new Expression_equality_eqContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 225;
						Match(EQUAL);
						State = 226;
						expression(10);
						}
						break;
					case 13:
						{
						_localctx = new Expression_equality_not_eqContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 228;
						Match(NOTEQUAL);
						State = 229;
						expression(9);
						}
						break;
					case 14:
						{
						_localctx = new Expression_bitwise_andContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 231;
						Match(BIT_AND);
						State = 232;
						expression(8);
						}
						break;
					case 15:
						{
						_localctx = new Expression_bitwise_orContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 234;
						Match(BIT_OR);
						State = 235;
						expression(7);
						}
						break;
					case 16:
						{
						_localctx = new Expression_bitwise_xorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 237;
						Match(BIT_XOR);
						State = 238;
						expression(6);
						}
						break;
					case 17:
						{
						_localctx = new Expression_logical_andContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 239;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 240;
						Match(AND);
						State = 241;
						expression(5);
						}
						break;
					case 18:
						{
						_localctx = new Expression_logical_orContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 242;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 243;
						Match(OR);
						State = 244;
						expression(4);
						}
						break;
					case 19:
						{
						_localctx = new Expression_ternaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 245;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 246;
						Match(TERNARY);
						State = 247;
						expression(0);
						State = 248;
						Match(COLON);
						State = 249;
						expression(2);
						}
						break;
					case 20:
						{
						_localctx = new Expression_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 252;
						assignment_operator();
						State = 253;
						expression(2);
						}
						break;
					case 21:
						{
						_localctx = new Expression_postfix_inc_decContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 255;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 256;
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 22:
						{
						_localctx = new Expression_postfix_array_accessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 258;
						Match(LBRACK);
						State = 259;
						expression(0);
						State = 260;
						Match(RBRACK);
						}
						break;
					case 23:
						{
						_localctx = new Expression_postfix_invokeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 262;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 263;
						Match(LPAREN);
						State = 265;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & 595986841862271L) != 0)) {
							{
							State = 264;
							expression_list();
							}
						}

						State = 267;
						Match(RPAREN);
						}
						break;
					case 24:
						{
						_localctx = new Expression_postfix_invoke_asyncContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 268;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 269;
						Match(LBRACE);
						State = 271;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & 595986841862271L) != 0)) {
							{
							State = 270;
							expression_list();
							}
						}

						State = 273;
						Match(RBRACE);
						}
						break;
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(DialogueScriptParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(DialogueScriptParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(DialogueScriptParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(DialogueScriptParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(DialogueScriptParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(DialogueScriptParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(DialogueScriptParser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(DialogueScriptParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(DialogueScriptParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(DialogueScriptParser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(DialogueScriptParser.RSHIFT_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2250700302057472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_typeContext primitive_type() {
			return GetRuleContext<Primitive_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(DialogueScriptParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(DialogueScriptParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DialogueScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DialogueScriptParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(DialogueScriptParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(DialogueScriptParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_BOOLEAN:
			case TYPE_CHAR:
			case TYPE_FLOAT_DEFAULT:
			case TYPE_FLOAT32:
			case TYPE_FLOAT64:
			case TYPE_INT_DEFAULT:
			case TYPE_INT8:
			case TYPE_INT16:
			case TYPE_INT32:
			case TYPE_INT64:
			case TYPE_UINT_DEFAULT:
			case TYPE_UINT8:
			case TYPE_UINT16:
			case TYPE_UINT32:
			case TYPE_UINT64:
			case TYPE_STRING:
				{
				State = 282;
				primitive_type();
				}
				break;
			case IDENTIFIER:
				{
				State = 283;
				name();
				State = 295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 284;
					Match(LT);
					State = 285;
					type(0);
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 286;
						Match(COMMA);
						State = 287;
						type(0);
						}
						}
						State = 292;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 293;
					Match(GT);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 299;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 300;
					Match(LBRACK);
					State = 301;
					Match(RBRACK);
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primitive_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOLEAN() { return GetToken(DialogueScriptParser.TYPE_BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CHAR() { return GetToken(DialogueScriptParser.TYPE_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT_DEFAULT() { return GetToken(DialogueScriptParser.TYPE_FLOAT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT32() { return GetToken(DialogueScriptParser.TYPE_FLOAT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT64() { return GetToken(DialogueScriptParser.TYPE_FLOAT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT_DEFAULT() { return GetToken(DialogueScriptParser.TYPE_INT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT8() { return GetToken(DialogueScriptParser.TYPE_INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT16() { return GetToken(DialogueScriptParser.TYPE_INT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT32() { return GetToken(DialogueScriptParser.TYPE_INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT64() { return GetToken(DialogueScriptParser.TYPE_INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT_DEFAULT() { return GetToken(DialogueScriptParser.TYPE_UINT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT8() { return GetToken(DialogueScriptParser.TYPE_UINT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT16() { return GetToken(DialogueScriptParser.TYPE_UINT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT32() { return GetToken(DialogueScriptParser.TYPE_UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT64() { return GetToken(DialogueScriptParser.TYPE_UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(DialogueScriptParser.TYPE_STRING, 0); }
		public Primitive_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_type; } }
	}

	[RuleVersion(0)]
	public Primitive_typeContext primitive_type() {
		Primitive_typeContext _localctx = new Primitive_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131070L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DialogueScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DialogueScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(DialogueScriptParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(DialogueScriptParser.DOT, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 44, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(IDENTIFIER);
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 310;
					Match(DOT);
					State = 311;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flag_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(DialogueScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DialogueScriptParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DialogueScriptParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DialogueScriptParser.COMMA, i);
		}
		public Flag_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag_list; } }
	}

	[RuleVersion(0)]
	public Flag_listContext flag_list() {
		Flag_listContext _localctx = new Flag_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_flag_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(IDENTIFIER);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 318;
				Match(COMMA);
				State = 319;
				Match(IDENTIFIER);
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(DialogueScriptParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(DialogueScriptParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(DialogueScriptParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(DialogueScriptParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(DialogueScriptParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(DialogueScriptParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 6);
		case 15: return Precpred(Context, 5);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		case 20: return Precpred(Context, 25);
		case 21: return Precpred(Context, 24);
		case 22: return Precpred(Context, 23);
		case 23: return Precpred(Context, 22);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,328,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,2,1,2,3,2,65,8,2,1,2,1,2,1,3,1,3,3,3,71,8,3,1,3,1,3,
		1,4,5,4,76,8,4,10,4,12,4,79,9,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,87,8,5,1,6,
		1,6,3,6,91,8,6,1,6,1,6,1,7,4,7,96,8,7,11,7,12,7,97,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,3,9,110,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		5,11,120,8,11,10,11,12,11,123,9,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,
		131,8,12,10,12,12,12,134,9,12,1,12,1,12,1,12,5,12,139,8,12,10,12,12,12,
		142,9,12,3,12,144,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,153,8,14,
		1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,5,17,163,8,17,10,17,12,17,166,
		9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,3,18,185,8,18,1,18,3,18,188,8,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,3,18,266,8,18,1,18,1,18,1,18,1,18,3,18,272,8,18,1,18,5,18,
		275,8,18,10,18,12,18,278,9,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,5,20,289,8,20,10,20,12,20,292,9,20,1,20,1,20,3,20,296,8,20,3,20,298,
		8,20,1,20,1,20,1,20,5,20,303,8,20,10,20,12,20,306,9,20,1,21,1,21,1,22,
		1,22,1,22,5,22,313,8,22,10,22,12,22,316,9,22,1,23,1,23,1,23,5,23,321,8,
		23,10,23,12,23,324,9,23,1,24,1,24,1,24,0,2,36,40,25,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,4,1,0,64,65,1,0,40,
		50,1,0,1,16,1,0,23,28,361,0,53,1,0,0,0,2,58,1,0,0,0,4,62,1,0,0,0,6,68,
		1,0,0,0,8,77,1,0,0,0,10,86,1,0,0,0,12,88,1,0,0,0,14,95,1,0,0,0,16,99,1,
		0,0,0,18,102,1,0,0,0,20,111,1,0,0,0,22,117,1,0,0,0,24,143,1,0,0,0,26,145,
		1,0,0,0,28,149,1,0,0,0,30,154,1,0,0,0,32,156,1,0,0,0,34,159,1,0,0,0,36,
		187,1,0,0,0,38,279,1,0,0,0,40,297,1,0,0,0,42,307,1,0,0,0,44,309,1,0,0,
		0,46,317,1,0,0,0,48,325,1,0,0,0,50,52,3,2,1,0,51,50,1,0,0,0,52,55,1,0,
		0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,57,5,0,
		0,1,57,1,1,0,0,0,58,59,3,4,2,0,59,60,3,8,4,0,60,61,3,6,3,0,61,3,1,0,0,
		0,62,64,5,52,0,0,63,65,3,46,23,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,
		0,0,66,67,5,52,0,0,67,5,1,0,0,0,68,70,5,51,0,0,69,71,3,46,23,0,70,69,1,
		0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,5,51,0,0,73,7,1,0,0,0,74,76,3,
		10,5,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,9,1,
		0,0,0,79,77,1,0,0,0,80,87,3,18,9,0,81,87,3,20,10,0,82,87,3,12,6,0,83,87,
		3,16,8,0,84,87,3,26,13,0,85,87,3,32,16,0,86,80,1,0,0,0,86,81,1,0,0,0,86,
		82,1,0,0,0,86,83,1,0,0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,11,1,0,0,0,88,
		90,5,31,0,0,89,91,3,14,7,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,
		93,5,32,0,0,93,13,1,0,0,0,94,96,3,10,5,0,95,94,1,0,0,0,96,97,1,0,0,0,97,
		95,1,0,0,0,97,98,1,0,0,0,98,15,1,0,0,0,99,100,3,36,18,0,100,101,5,35,0,
		0,101,17,1,0,0,0,102,103,5,20,0,0,103,104,5,29,0,0,104,105,3,36,18,0,105,
		106,5,30,0,0,106,109,3,10,5,0,107,108,5,21,0,0,108,110,3,10,5,0,109,107,
		1,0,0,0,109,110,1,0,0,0,110,19,1,0,0,0,111,112,5,22,0,0,112,113,5,29,0,
		0,113,114,3,36,18,0,114,115,5,30,0,0,115,116,3,22,11,0,116,21,1,0,0,0,
		117,121,5,31,0,0,118,120,3,24,12,0,119,118,1,0,0,0,120,123,1,0,0,0,121,
		119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,
		32,0,0,125,23,1,0,0,0,126,127,5,18,0,0,127,128,3,36,18,0,128,132,5,38,
		0,0,129,131,3,10,5,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,
		133,1,0,0,0,133,144,1,0,0,0,134,132,1,0,0,0,135,136,5,19,0,0,136,140,5,
		38,0,0,137,139,3,10,5,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
		0,140,141,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,143,126,1,0,0,0,143,
		135,1,0,0,0,144,25,1,0,0,0,145,146,3,40,20,0,146,147,3,28,14,0,147,148,
		5,35,0,0,148,27,1,0,0,0,149,152,3,30,15,0,150,151,5,40,0,0,151,153,3,36,
		18,0,152,150,1,0,0,0,152,153,1,0,0,0,153,29,1,0,0,0,154,155,5,72,0,0,155,
		31,1,0,0,0,156,157,5,17,0,0,157,158,5,35,0,0,158,33,1,0,0,0,159,164,3,
		36,18,0,160,161,5,36,0,0,161,163,3,36,18,0,162,160,1,0,0,0,163,166,1,0,
		0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,35,1,0,0,0,166,164,1,0,0,0,167,
		168,6,18,-1,0,168,188,3,44,22,0,169,188,3,48,24,0,170,171,5,29,0,0,171,
		172,3,36,18,0,172,173,5,30,0,0,173,188,1,0,0,0,174,185,5,67,0,0,175,185,
		5,66,0,0,176,185,5,57,0,0,177,185,5,58,0,0,178,185,5,65,0,0,179,185,5,
		64,0,0,180,181,5,29,0,0,181,182,3,40,20,0,182,183,5,30,0,0,183,185,1,0,
		0,0,184,174,1,0,0,0,184,175,1,0,0,0,184,176,1,0,0,0,184,177,1,0,0,0,184,
		178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,185,186,1,0,0,0,186,188,3,
		36,18,21,187,167,1,0,0,0,187,169,1,0,0,0,187,170,1,0,0,0,187,184,1,0,0,
		0,188,276,1,0,0,0,189,190,10,20,0,0,190,191,5,68,0,0,191,275,3,36,18,21,
		192,193,10,19,0,0,193,194,5,69,0,0,194,275,3,36,18,20,195,196,10,18,0,
		0,196,197,5,70,0,0,197,275,3,36,18,19,198,199,10,17,0,0,199,200,5,66,0,
		0,200,275,3,36,18,18,201,202,10,16,0,0,202,203,5,67,0,0,203,275,3,36,18,
		17,204,205,10,15,0,0,205,206,5,52,0,0,206,207,5,52,0,0,207,275,3,36,18,
		16,208,209,10,14,0,0,209,210,5,51,0,0,210,211,5,51,0,0,211,275,3,36,18,
		15,212,213,10,13,0,0,213,214,5,52,0,0,214,275,3,36,18,14,215,216,10,12,
		0,0,216,217,5,51,0,0,217,275,3,36,18,13,218,219,10,11,0,0,219,220,5,54,
		0,0,220,275,3,36,18,12,221,222,10,10,0,0,222,223,5,55,0,0,223,275,3,36,
		18,11,224,225,10,9,0,0,225,226,5,53,0,0,226,275,3,36,18,10,227,228,10,
		8,0,0,228,229,5,56,0,0,229,275,3,36,18,9,230,231,10,7,0,0,231,232,5,59,
		0,0,232,275,3,36,18,8,233,234,10,6,0,0,234,235,5,60,0,0,235,275,3,36,18,
		7,236,237,10,5,0,0,237,238,5,61,0,0,238,275,3,36,18,6,239,240,10,4,0,0,
		240,241,5,62,0,0,241,275,3,36,18,5,242,243,10,3,0,0,243,244,5,63,0,0,244,
		275,3,36,18,4,245,246,10,2,0,0,246,247,5,71,0,0,247,248,3,36,18,0,248,
		249,5,38,0,0,249,250,3,36,18,2,250,275,1,0,0,0,251,252,10,1,0,0,252,253,
		3,38,19,0,253,254,3,36,18,2,254,275,1,0,0,0,255,256,10,25,0,0,256,275,
		7,0,0,0,257,258,10,24,0,0,258,259,5,33,0,0,259,260,3,36,18,0,260,261,5,
		34,0,0,261,275,1,0,0,0,262,263,10,23,0,0,263,265,5,29,0,0,264,266,3,34,
		17,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,275,5,30,0,0,
		268,269,10,22,0,0,269,271,5,31,0,0,270,272,3,34,17,0,271,270,1,0,0,0,271,
		272,1,0,0,0,272,273,1,0,0,0,273,275,5,32,0,0,274,189,1,0,0,0,274,192,1,
		0,0,0,274,195,1,0,0,0,274,198,1,0,0,0,274,201,1,0,0,0,274,204,1,0,0,0,
		274,208,1,0,0,0,274,212,1,0,0,0,274,215,1,0,0,0,274,218,1,0,0,0,274,221,
		1,0,0,0,274,224,1,0,0,0,274,227,1,0,0,0,274,230,1,0,0,0,274,233,1,0,0,
		0,274,236,1,0,0,0,274,239,1,0,0,0,274,242,1,0,0,0,274,245,1,0,0,0,274,
		251,1,0,0,0,274,255,1,0,0,0,274,257,1,0,0,0,274,262,1,0,0,0,274,268,1,
		0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,37,1,0,0,0,278,
		276,1,0,0,0,279,280,7,1,0,0,280,39,1,0,0,0,281,282,6,20,-1,0,282,298,3,
		42,21,0,283,295,3,44,22,0,284,285,5,52,0,0,285,290,3,40,20,0,286,287,5,
		36,0,0,287,289,3,40,20,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,
		0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,51,0,0,294,
		296,1,0,0,0,295,284,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,281,1,
		0,0,0,297,283,1,0,0,0,298,304,1,0,0,0,299,300,10,2,0,0,300,301,5,33,0,
		0,301,303,5,34,0,0,302,299,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
		305,1,0,0,0,305,41,1,0,0,0,306,304,1,0,0,0,307,308,7,2,0,0,308,43,1,0,
		0,0,309,314,5,72,0,0,310,311,5,37,0,0,311,313,5,72,0,0,312,310,1,0,0,0,
		313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,45,1,0,0,0,316,314,
		1,0,0,0,317,322,5,72,0,0,318,319,5,36,0,0,319,321,5,72,0,0,320,318,1,0,
		0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,47,1,0,0,0,324,
		322,1,0,0,0,325,326,7,3,0,0,326,49,1,0,0,0,26,53,64,70,77,86,90,97,109,
		121,132,140,143,152,164,184,187,265,271,274,276,290,295,297,304,314,322
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
